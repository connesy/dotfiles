#!/bin/bash

RESET="\[\017\]"
NORMAL="\[\033[00m\]"
YELLOW="\[\033[01;33m\]"
GREEN="\[\033[32m\]"
LIGHT_GREEN="\[\033[01;32m\]"
LIGHT_BLUE="\[\033[01;34m\]"
LIGHT_PURPLE="\[\033[01;35m\]"

# Trim the directories in the prompt path to this level
PROMPT_DIRTRIM=2

# Shorthand hostname
SHORT_HOSTNAME="$(hostname | sed 's|-.*||')"

# Try to load git __git_ps1 if possible
if [ -f /usr/share/git-core/contrib/completion/git-prompt.sh  ]; then
    source /usr/share/git-core/contrib/completion/git-prompt.sh
fi

# Set up the prompt with GIT niceness if available
if [ "$TERM" != "dumb" ]; then
    LINE_ENDING=""
    if [ ! -z $PIPENV_ACTIVE ]; then
        LINE_ENDING="\n"
    fi

    if hash __git_ps1 &> /dev/null; then
        # Show the git branch if possible
        GIT_PS1_SHOWDIRTYSTATE=1
        GIT_PS1_SHOWCOLORHINTS=1
        GIT_PS1_SHOWUPSTREAM="auto"

        # With timestamp
        PS1="${YELLOW}[\A]${LIGHT_GREEN}\u@${YELLOW}${SHORT_HOSTNAME}${GREEN}${NORMAL} ${LIGHT_BLUE}\w${NORMAL} ${LIGHT_PURPLE}\$(__git_ps1 '(%s)')${NORMAL}${LINE_ENDING}$ "; PROMPT_DIRTRIM=${PROMPT_DIRTRIM}

        # Without timestamp
        #PS1="\[\033[01;32m\]\u@\[\033[01;33m\]${SHORT_HOSTNAME}\\[\033[32m\] \[\033[01;34m\]\w\[\033[00m\] \[\033[01;35m\]\$(__git_ps1 '(%s)')\[\033[00m\]$ "
    else
        # With timestamp
        PS1="${YELLOW}[\A]${LIGHT_GREEN}\u@${YELLOW}${SHORT_HOSTNAME}${GREEN}${NORMAL} ${LIGHT_BLUE}\w${NORMAL}${LINE_ENDING}$ "; PROMPT_DIRTRIM=${PROMPT_DIRTRIM}

        # Without timestamp
        #PS1="\[\033[01;32m\]\u@\[\033[01;33m\]${SHORT_HOSTNAME}\\[\033[32m\] \[\033[01;34m\]\w\[\033[00m\] \[\033[00m\]$ "

    fi

    # Hack to support Mac not having dircolors
    if dircolors 1> /dev/null 2>&1; then
        eval "`dircolors -b`"
        alias ls='ls --color=auto --hide=*~' # Hide the annoying tmp files from emacs users.
    else
        export CLICOLOR=1
        export LSCOLORS=GxFxCxDxBxegedabagaced
    fi
fi

function cd() {
    # If cd'ing to a file, cd to its directory instead
    if [ $# -ne 1 ] || [ "$1" = "-" ]; then
        command cd "$@";
        return;
    fi;
    if [ -f "$1" ] && [ -d $(dirname "$1") ]; then
        command cd $(dirname "$1");
    else
        command cd "$1";
    fi;

    # Overwrite cd to invoke pipenv shell in directories with Pipfiles
    if [ -f "Pipfile" ] && [ -z "$PIPENV_ACTIVE" ]; then
        pipenv shell;
    fi;
}

# Convenience function to profile a python script
profile() {
    local arg1=$1;
    python -m cProfile -o "$arg1.prof" $arg1;
}

# Set breakpoint() in Python to call pudb
# export PYTHONBREAKPOINT="pudb.set_trace"

# On the datascience VM, gpg cannot use UI to ask for the password, so we need it to ask in the terminal
export GPG_TTY=$(tty)

# Create directory, then cd into it
mkcd () {
    mkdir -p "$1";
    cd "$1";
}

export EDITOR="$(which nano)"
